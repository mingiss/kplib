/* -----------------------------
 * kptree.h
 *      tree-like structure definition
 *      
 *  Changelog:
 *      2013-06-11  mp  initial creation
 *       
 */  


#ifndef kptree_included
#define kptree_included

template <class KpTreeRecType> 
class KpTreeEntry
{
private:
    KpTreeRecType *m_lpRecord;

public:
    KpTreeEntry<KpTreeRecType> *m_pFirstChild; // TeXtrcClass::FindFile() naudoja tiesioginį pointerį, po to trina listo elementą
private:
    KpTreeEntry<KpTreeRecType> *m_pPrevBrother;
    KpTreeEntry<KpTreeRecType> *m_pNextBrother;
    KpTreeEntry<KpTreeRecType> *m_pFather;

public:
    // create new record entry
    // stores allocated object pointer lpRecord to m_lpRecord
    // don't delete it after return
    KpTreeEntry(KpTreeRecType *lpRecord, KpTreeEntry<KpTreeRecType> *pFath); 

    virtual ~KpTreeEntry();
   
    // get record object pointer m_lpRecord
    KpTreeRecType *GetValue(void){ return(m_lpRecord); } 
    
// ------------------------------
// simply linear list methods

    // sets value of pointer to the next entry (child) m_pFirstChild
    // sets next chain member in case of linear list
    // pChild cannot be deleted after successfull SetFirstChild()
    // pChild->m_pFather turi sutapti su this
    // pChild->m_pPrevBrother turi buti NULL
    void SetFirstChild(KpTreeEntry<KpTreeRecType> *pChild);

    // gets value of m_pFirstChild
    // gets pointer to next entry of the linear list
    // NULL - last entry
    KpTreeEntry<KpTreeRecType> *GetFirstChild(void) const { return(m_pFirstChild); }

    // uses the object *lpNode itself, don't delete it after return 
    void PutToEnd(KpTreeEntry<KpTreeRecType> *lpNode);
    

// ------------------------------
// tree management methods

    KpTreeEntry<KpTreeRecType> *GetFather(void) const { return(m_pFather); };

    // nustato tėvą ir visiems tolimesniems broliams
    // pPrevBrother turi buti NULL
    // pFath cannnot be deleted after successfull SetFather()
    void SetFather0(KpTreeEntry<KpTreeRecType> *pFath); // recursive entry
    void SetFather(KpTreeEntry<KpTreeRecType> *pFath);  // main entry

    KpTreeEntry<KpTreeRecType> *GetPrevBrother(void) const { return(m_pPrevBrother); }

    // pPrevBr cannnot be deleted after successfull SetPrevBrother()
    // pPrevBr->pFather turi sutapti su this->pFather
    void SetPrevBrother(KpTreeEntry<KpTreeRecType> *pPrevBr);

    KpTreeEntry<KpTreeRecType> *GetNextBrother(void) const { return(m_pNextBrother); }
    
    // nustato sekantį brolį šiam mazgui (this)
    // pNextBr cannnot be deleted after successfull SetNextBrother()
    // pNextBr->pFather turi sutapti su this->pFather
    void SetNextBrother(KpTreeEntry<KpTreeRecType> *pNextBr);  

// TODO: panašiai, kaip ir DeleteKpTreeEntry, tik elementą trina, vietoj jo atkeldamas vaikus
// TODO: elementą trina su visais broliais
// tinka paprasto listo tvarkymui
// DeleteChild() papildymas
    static void DeleteKpTreeNode(KpTreeEntry<KpTreeRecType> **ppEntryPtr); 
};

#endif // #ifndef kptree_included


/* -----------------------------
 * kptree.cpp
 *      tree-like structure implementation
 *      
 *  Changelog:
 *      2013-06-11  mp  initial creation
 *       
 */  

// --------------------------
#include "envir.h"

#include <stdlib.h>
#include <string.h>
#include <string>
#include <stdio.h>
#include <fstream>
#ifdef __WIN32__
#include <windows.h>
#endif

using namespace std;

#include "kperrno.h"
#include "kpstdlib.h"
#include "kptt.h"
#include "kpctype.h"
#include "kpstring.h"
#include "kpmsg.h"
#include "kperr.h"
#include "kptree.h"


// --------------------------
KpTreeEntry::KpTreeEntry(KpTreeRec *lpRecord, KpTreeEntry *pFath)
{
   KP_ASSERT(lpRecord != NULL, E_INVALIDARG, null);
   m_lpRecord = lpRecord;

   m_pFather = pFath;
   m_pFirstChild = NULL;
   m_pPrevBrother = NULL;
   m_pNextBrother = NULL;
}


// ----------------------
KpTreeEntry::~KpTreeEntry()
{
KpTreeEntry *next_br = NULL;

    while (m_pNextBrother != NULL)
    {
        next_br = m_pNextBrother->GetNextBrother();
        m_pNextBrother->SetNextBrother(NULL);
//      m_pNextBrother->SetPrevBrother(NULL);

        KP_DELETE(m_pNextBrother);
        if (next_br != NULL) next_br->SetPrevBrother(this);
        SetNextBrother(next_br);
    }

    KP_DELETE(m_pFirstChild);

	KP_DELETE(m_lpRecord);
}


// ----------------------
void KpTreeEntry::PutToEnd(KpTreeEntry *lpNode)
{
KpTreeEntry *cur_entry = this;
KpTreeEntry *next_entry = NULL;

    KP_ASSERT(lpNode != NULL, E_INVALIDARG, null);

    do
    {
        next_entry = cur_entry->GetFirstChild();
        if (next_entry != NULL) cur_entry = next_entry;
    } while (next_entry != NULL);

    lpNode->SetFather(cur_entry);
    cur_entry->SetFirstChild(lpNode);
}


//-----------------------------------
void KpTreeEntry::SetPrevBrother(KpTreeEntry *pPrevBr)
{
KpTreeEntry *father = NULL;

    if (pPrevBr != NULL)
    {
        father = pPrevBr->GetFather();
        KP_ASSERT(father == m_pFather, KP_E_SYSTEM_ERROR, null);
    }

    m_pPrevBrother = pPrevBr;
}


//-----------------------------------
void KpTreeEntry::SetNextBrother(KpTreeEntry *pNextBr)
{
KpTreeEntry *father = NULL;

    if (pNextBr != NULL)
    {
        father = pNextBr->GetFather();
        KP_ASSERT(father == m_pFather, KP_E_SYSTEM_ERROR, null);
    }

    m_pNextBrother = pNextBr;
}


//-----------------------------------
void KpTreeEntry::SetFather0(KpTreeEntry *pFath)
{
   m_pFather = pFath;

// recursion
   if (m_pNextBrother != NULL) m_pNextBrother->SetFather0(pFath);
}


//-----------------------------------
void KpTreeEntry::SetFather(KpTreeEntry *pFath)
{
    KP_ASSERT(m_pPrevBrother == NULL, KP_E_SYSTEM_ERROR, null);
    SetFather0(pFath);
}


//-----------------------------------
void KpTreeEntry::SetFirstChild(KpTreeEntry *pChild)
{
KpTreeEntry *father = NULL;
KpTreeEntry *prev_brother = NULL;
    
    if (pChild != NULL)
    {
        father = pChild->GetFather();
        KP_ASSERT(father == this, KP_E_SYSTEM_ERROR, null);

        prev_brother = pChild->GetPrevBrother();
        KP_ASSERT(prev_brother == NULL, KP_E_SYSTEM_ERROR, null);
    }

    m_pFirstChild = pChild;
}


// ----------------------
void DeleteKpTreeNode(KpTreeEntry **ppEntryPtr)
{
    KP_ASSERT(ppEntryPtr != NULL, E_POINTER, null);
    KP_ASSERT(*ppEntryPtr != NULL, E_POINTER, null);

KpTreeEntry *first_child = NULL;
    first_child = (*ppEntryPtr)->GetFirstChild();

KpTreeEntry *prev_brother = NULL;
    prev_brother = (*ppEntryPtr)->GetPrevBrother();

KpTreeEntry *father = NULL;
    father = (*ppEntryPtr)->GetFather();

    if (first_child != NULL) 
    {
        first_child->SetPrevBrother(prev_brother);
        first_child->SetFather0(father);
    }
    if (prev_brother != NULL) prev_brother->SetNextBrother(first_child);

   (*ppEntryPtr)->SetFirstChild(NULL);
// (*ppEntryPtr)->SetPrevBrother(NULL);
   KP_DELETE(*ppEntryPtr);
   
   *ppEntryPtr = first_child;

// pirmas vaikas  nustatom naujà tëvo pirmà vaikà
   if ((prev_brother == NULL) && (father != NULL)) father->SetFirstChild(first_child);
}

